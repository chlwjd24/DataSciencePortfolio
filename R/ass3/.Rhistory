taus <- c(.05,.50,.95)
h=100
for( i in 1:length(taus)){
abline(rq(Y~X,tau=taus[i]),col="gray", subset=h)
abline(rq(Y~X,tau=taus[i]),col="green", subset=h/5)
abline(rq(Y~X,tau=taus[i]),col="yellow", subset=5*h)
}
#library(quantreg)
#library(SparseM)
plot(X,Y,cex=.25,type="n",xlab="Sale Price", ylab="Floor Space")
points(X,Y,cex=.5,col="blue")
abline(rq(Y~X,tau=.5),col="blue")
abline(lm(Y~X),lty=2,col="red") #the dreaded ols line
taus <- c(.05,.50,.95)
h=100
for( i in 1:length(taus)){
abline(rq(Y~X,tau=taus[i]),col="gray", h=h)
abline(rq(Y~X,tau=taus[i]),col="green", h=h/5)
abline(rq(Y~X,tau=taus[i]),col="yellow", h=5*h)
}
help(rq)
target<- seq(min(X),max(X),by=0.01)
n1<- length(target)
prd<- matrix(0,n1,3) # Define Matrix of prediction
for (i in 1:n1) {
dist<-  abs(X-target[i])
h=quantile(dist,0.30)
wgt<- (1 - (dist/h)^3)^3
fit<- rq(Y~X,tau=c(0.05, 0.50, 0.95), weights=wgt,subset=(dist<h))
prd[i,1]= fit$coefficients[1,1]+fit$coefficients[2,1]*target[i] # prediction of target value for tau= 0.05
prd[i,2]= fit$coefficients[1,2]+fit$coefficients[2,2]*target[i] # prediction of target value for tau= 0.50
prd[i,3]= fit$coefficients[1,3]+fit$coefficients[2,3]*target[i] # prediction of target value for tau= 0.95
}
plot(X,Y)
lines(target, prd[,1], col='red' ) # Quantile regression model tau =0.05
lines(target, prd[,2], col='green' ) # Quantile regression model tau =0.50
lines(target, prd[,3], col='blue' ) # Quantile regression model tau =0.95
}
target<- seq(min(X),max(X),by=0.01)
n1<- length(target)
prd<- matrix(0,n1,3) # Define Matrix of prediction
for (i in 1:n1) {
dist<-  abs(X-target[i])
h=quantile(dist,0.30)
wgt<- (1 - (dist/h)^3)^3
fit<- rq(Y~X,tau=c(0.05, 0.50, 0.95), weights=wgt,subset=(dist<h))
prd[i,1]= fit$coefficients[1,1]+fit$coefficients[2,1]*target[i] # prediction of target value for tau= 0.05
prd[i,2]= fit$coefficients[1,2]+fit$coefficients[2,2]*target[i] # prediction of target value for tau= 0.50
prd[i,3]= fit$coefficients[1,3]+fit$coefficients[2,3]*target[i] # prediction of target value for tau= 0.95
}
plot(X,Y)
lines(target, prd[,1], col='red' ) # Quantile regression model tau =0.05
lines(target, prd[,2], col='green' ) # Quantile regression model tau =0.50
lines(target, prd[,3], col='blue' ) # Quantile regression model tau =0.95
}
target<- seq(min(X),max(X),by=0.01)
n1<- length(target)
prd<- matrix(0,n1,3) # Define Matrix of prediction
for (i in 1:n1) {
dist<-  abs(X-target[i])
h=quantile(dist,0.30)
wgt<- (1 - (dist/h)^3)^3
fit<- rq(Y~X,tau=c(0.05, 0.50, 0.95), weights=wgt,subset=(dist<h))
prd[i,1]= fit$coefficients[1,1]+fit$coefficients[2,1]*target[i] # prediction of target value for tau= 0.05
prd[i,2]= fit$coefficients[1,2]+fit$coefficients[2,2]*target[i] # prediction of target value for tau= 0.50
prd[i,3]= fit$coefficients[1,3]+fit$coefficients[2,3]*target[i] # prediction of target value for tau= 0.95
}
plot(X,Y)
lines(target, prd[,1], col='red' ) # Quantile regression model tau =0.05
lines(target, prd[,2], col='green' ) # Quantile regression model tau =0.50
lines(target, prd[,3], col='blue' ) # Quantile regression model tau =0.95
View(prd)
target<- seq(min(X),max(X),by=0.01)
n1<- length(target)
prd<- matrix(0,n1,3) # Define Matrix of prediction
for (i in 1:n1) {
dist<-abs(X-target[i])
h=quantile(dist,0.30)
wgt<-(1-(dist/h)^3)^3
fit<- rq(Y~X,tau=c(0.05, 0.50, 0.95), weights=wgt,subset=(dist<h))
prd[i,1]= fit$coefficients[1,1]+fit$coefficients[2,1]*target[i] # prediction of target value for tau= 0.05
prd[i,2]= fit$coefficients[1,2]+fit$coefficients[2,2]*target[i] # prediction of target value for tau= 0.50
prd[i,3]= fit$coefficients[1,3]+fit$coefficients[2,3]*target[i] # prediction of target value for tau= 0.95
}
View(prd)
for (i in 1:n1) {
dist<-abs(X-target[i])
h=quantile(dist,0.30)/5
wgt<-(1-(dist/h)^3)^3
fit<- rq(Y~X,tau=c(0.05, 0.50, 0.95), weights=wgt,subset=(dist<h))
prd[i,4]= fit$coefficients[1,4]+fit$coefficients[2,4]*target[i] # prediction of target value for tau= 0.05
prd[i,5]= fit$coefficients[1,5]+fit$coefficients[2,5]*target[i] # prediction of target value for tau= 0.50
prd[i,6]= fit$coefficients[1,6]+fit$coefficients[2,6]*target[i] # prediction of target value for tau= 0.95
}
library(quantreg)
# Sample data
X <- c(800, 1000, 1200, 1500, 1800)
Y <- c(350000, 450000, 500000, 550000, 600000)
# Bandwidth selection
h <- quantile(abs(X - 0.2), 0.3)
# Estimation of quantile regression at target points
target <- c(0.2, 0.4, 0.6, 0.8)
bandwidths <- c(h, 5*h, h/5)
prd <- matrix(0, nrow = length(target), ncol = length(bandwidths) * 3)
for (i in 1:length(target)) {
dist <- abs(X - target[i])
for (j in 1:length(bandwidths)) {
bw <- bandwidths[j]
wgt <- (1 - (dist / bw)^3)^3
fit <- rq(Y ~ X, tau = c(0.05, 0.50, 0.95), weights = wgt, subset = (dist < bw))
prd[i, (j-1)*3 + 1] <- fit$coefficients[1] + fit$coefficients[2] * target[i]  # prediction of target value for tau = 0.05
prd[i, (j-1)*3 + 2] <- fit$coefficients[1] + fit$coefficients[2] * target[i]  # prediction of target value for tau = 0.50
prd[i, (j-1)*3 + 3] <- fit$coefficients[1] + fit$coefficients[2] * target[i]  # prediction of target value for tau = 0.95
}
}
# Nonparametric quantile regression functions
q_ll <- function(x, Y, X, h, quantile) {
weights <- l_ll(x, X, h)
sorted_indices <- order(X)
sorted_Y <- Y[sorted_indices]
sorted_weights <- weights[sorted_indices]
cum_weights <- cumsum(sorted_weights)
target_index <- min(which(cum_weights >= quantile))
if (cum_weights[target_index] == quantile) {
return(sorted_Y[target_index])
} else {
slope <- (sorted_Y[target_index + 1] - sorted_Y[target_index]) /
(cum_weights[target_index + 1] - cum_weights[target_index])
return(sorted_Y[target_index] + (quantile - cum_weights[target_index]) * slope)
}
}
# Bandwidth and quantiles
h <- 100
quantiles <- c(0.05, 0.5, 0.95)
# Estimate quantiles using nonparametric quantile regression
quantile_5_h <- sapply(X, q_ll, Y = Y, X = X, h = h, quantile = quantiles[1])
rm(list=ls())
data <- read.csv("data.csv")
X<-data$floorspace
Y<-data$saleprice
h<-100
nw <- ksmooth(X, Y, kernel="normal", bandwidth=h)
nw1<- ksmooth(X, Y, kernel="normal", bandwidth=h/5)
nw2<- ksmooth(X, Y, kernel="normal", bandwidth=5*h)
# Plotting the estimated curve on top of the data:
plot(X, Y);
lines(nw, col = "red")
lines(nw1, col = "green")
lines(nw2, col = "blue")
h<-100
s1 <- function(x,h,X) sum(dnorm((X-x)/h)*(X-x))
s2 <- function(x,h,X) sum(dnorm((X-x)/h)*(X-x)^2)
bl <- function(x,h,X) dnorm((X-x)/h)*(s2(x,h,X)-(X-x)*s1(x,h,X))
l_ll <- function(x,X,h) bl(x,h,X)/sum(bl(x,h,X))
rn_ll <- function(x,Y,X,h) sum(l_ll(x,X,h)*Y)
rn_ll <- Vectorize(rn_ll,"x")
plot(X, Y);
curve(rn_ll(x,Y,X,h=h),lwd=2,col="red",add = T)
curve(rn_ll(x,Y,X,h=h/5),lwd=2,col="green",add = T)
curve(rn_ll(x,Y,X,h=5*h),lwd=2,col="blue",add = T)
# Nonparametric quantile regression functions
q_ll <- function(x, Y, X, h, quantile) {
weights <- l_ll(x, X, h)
sorted_indices <- order(X)
sorted_Y <- Y[sorted_indices]
sorted_weights <- weights[sorted_indices]
cum_weights <- cumsum(sorted_weights)
target_index <- min(which(cum_weights >= quantile))
if (cum_weights[target_index] == quantile) {
return(sorted_Y[target_index])
} else {
slope <- (sorted_Y[target_index + 1] - sorted_Y[target_index]) /
(cum_weights[target_index + 1] - cum_weights[target_index])
return(sorted_Y[target_index] + (quantile - cum_weights[target_index]) * slope)
}
}
# Bandwidth and quantiles
h <- 100
quantiles <- c(0.05, 0.5, 0.95)
# Estimate quantiles using nonparametric quantile regression
quantile_5_h <- sapply(X, q_ll, Y = Y, X = X, h = h, quantile = quantiles[1])
# Nonparametric quantile regression functions
q_ll <- function(x, Y, X, h, quantile) {
weights <- l_ll(x, X, h)
sorted_indices <- order(X)
sorted_Y <- Y[sorted_indices]
sorted_weights <- weights[sorted_indices]
cum_weights <- cumsum(sorted_weights)
target_index <- min(which(cum_weights >= quantile))
if (cum_weights[target_index] == quantile) {
return(sorted_Y[target_index])
} else {
slope <- (sorted_Y[target_index + 1] - sorted_Y[target_index]) /
(cum_weights[target_index + 1] - cum_weights[target_index])
return(sorted_Y[target_index] + (quantile - cum_weights[target_index]) * slope)
}
}
# Bandwidth and quantiles
h <- 100
quantiles <- c(0.05, 0.5, 0.95)
# Estimate quantiles using nonparametric quantile regression
quantile_5_h <- sapply(X, q_ll, Y = Y, X = X, h = h, quantile = quantiles[1])
quantile_5_h <- sapply(X, q_ll, Y = Y, X = X, h = h, quantile = quantiles[1])
quantile_5_h <- sapply(X, q_ll, Y = Y, X = data$floorspace, h = h, quantile = quantiles[1])
quantile_5_h <- sapply(x, q_ll, Y = Y, X = X, h = h, quantile = quantiles[1])
quantile_5_h <- sapply(data$floorspace, q_ll, Y = Y, X = data$floorspace, h = h, quantile = quantiles[1])
quantile_5_h <- sapply(q_ll, Y = Y, X = X, h = h, quantile = quantiles[1])
quantile_5_h <- sapply(x=q_ll, Y = Y, X = X, h = h, quantile = quantiles[1])
help(sapply)
# Nonparametric quantile regression functions
q_ll <- function(x, Y, X, h, quantile) {
weights <- l_ll(x, X, h)
sorted_indices <- order(X)
sorted_Y <- Y[sorted_indices]
sorted_weights <- weights[sorted_indices]
cum_weights <- cumsum(sorted_weights)
target_index <- min(which(cum_weights >= quantile))
if (cum_weights[target_index] == quantile) {
return(sorted_Y[target_index])
} else {
slope <- (sorted_Y[target_index + 1] - sorted_Y[target_index]) /
(cum_weights[target_index + 1] - cum_weights[target_index])
return(sorted_Y[target_index] + (quantile - cum_weights[target_index]) * slope)
}
}
# Bandwidth and quantiles
h <- 100
quantiles <- c(0.05, 0.5, 0.95)
# Estimate quantiles using nonparametric quantile regression
quantile_5_h <- lapply(X, q_ll, Y = Y, X = X, h = h, quantile = quantiles[1])
# Nonparametric quantile regression functions
quantile_5_h<-sapply(X, rn_ll, Y = Y, X = X, h = h, quantile = quantiles[1])
# Nonparametric quantile regression functions
quantile_5_h<-rn_ll(x,Y,X,h=h)
install.packages("BwQuant-package")
# Nonparametric quantile regression functions
llqr(x, y, tau, t, h)
install.packages("BwQuant")
library("BwQuant")
# Nonparametric quantile regression functions
llqr(x, y, tau, t, h)
library("BwQuant")
# Nonparametric quantile regression functions
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
library("BwQuant")
# Nonparametric quantile regression functions
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, h=h)
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 100)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
curve(q_ll(x, Y, X, h = h, quantile = quantiles[1]), lwd = 2, col = "red", add = TRUE)
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
curve(q_ll(x, Y, X, h = h, quantile = quantiles[1]), lwd = 2, col = "red", add = TRUE)
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
curve(q_5_h, lwd = 2, col = "red", add = TRUE)
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h, col = "red")
View(q_5_h)
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h, col = "red")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
colnames(q_5_h) <- c("X", "Y")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
rownames(q_5_h) <- c("X", "Y")
q_5_h
help("rownames")
help("colnames")
colnames(q_5_h) <- c("X", "Y")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
rownames(q_5_h) <- c("X", "Y")
colnames(q_5_h)
rownames(q_5_h)
q_5_h[1]
q_5_h[1][1]
q_5_h[1,1
]
q_5_h[1,1]
q_5_h[1]
q_5_h(1)
q_5_h[,1]
q_5_h[,2]
dim(q_5_h)
View(q_5_h)
library("BwQuant")
library(tidyr)
library(dplyr)
library(readr)
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
rownames(q_5_h) <- c("X", "Y")
library("BwQuant")
library(tidyr)
library(dplyr)
library(readr)
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_5_h %>%
pivot_longer(
)
View(nw2)
View(nw2)
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 2930)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h, col = "red")
names(q_5_h)
names(q_5_h) <- c("X", "Y")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h, col = "red")
names(q_5_h) <- c("x", "y")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h, col = "red")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h$x.values,q_5_h$y.values col = "red")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h$x.values,q_5_h$y.values, col = "red")
lines(q_50_h, col = "green")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 100
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
q_5_h5<-llqr(X, Y, tau=0.05, t, h=h/5)
q_50_h5<-llqr(X, Y, tau=0.50, t, h=h/5)
q_95_h5<-llqr(X, Y, tau=0.95, t, h=h/5)
q_5_5h<-llqr(X, Y, tau=0.05, t, h=5*h)
q_50_5h<-llqr(X, Y, tau=0.50, t, h=5*h)
q_95_5h<-llqr(X, Y, tau=0.95, t, h=5*h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h$x.values,q_5_h$y.values, col = "red")
lines(q_50_h$x.values,q_50_h$y.values, col = "green")
lines(q_95_h$x.values,q_95_h$y.values, col = "blue")
lines(q_5_h5$x.values,q_5_h5$y.values, col = "red")
lines(q_50_h5$x.values,q_50_h5$y.values, col = "green")
lines(q_95_h5$x.values,q_95_h5$y.values, col = "blue")
lines(q_5_5h$x.values,q_5_5h$y.values, col = "red")
lines(q_50_5h$x.values,q_50_5h$y.values, col = "green")
lines(q_95_5h$x.values,q_95_5h$y.values, col = "blue")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 300
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
q_5_h5<-llqr(X, Y, tau=0.05, t, h=h/5)
q_50_h5<-llqr(X, Y, tau=0.50, t, h=h/5)
q_95_h5<-llqr(X, Y, tau=0.95, t, h=h/5)
q_5_5h<-llqr(X, Y, tau=0.05, t, h=5*h)
q_50_5h<-llqr(X, Y, tau=0.50, t, h=5*h)
q_95_5h<-llqr(X, Y, tau=0.95, t, h=5*h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h$x.values,q_5_h$y.values, col = "red")
lines(q_50_h$x.values,q_50_h$y.values, col = "green")
lines(q_95_h$x.values,q_95_h$y.values, col = "blue")
lines(q_5_h5$x.values,q_5_h5$y.values, col = "red")
lines(q_50_h5$x.values,q_50_h5$y.values, col = "green")
lines(q_95_h5$x.values,q_95_h5$y.values, col = "blue")
lines(q_5_5h$x.values,q_5_5h$y.values, col = "red")
lines(q_50_5h$x.values,q_50_5h$y.values, col = "green")
lines(q_95_5h$x.values,q_95_5h$y.values, col = "blue")
library("BwQuant")
# Nonparametric quantile regression functions
t <- seq(0, 600, l = 600)
h <- 300
q_5_h<-llqr(X, Y, tau=0.05, t, h=h)
q_50_h<-llqr(X, Y, tau=0.50, t, h=h)
q_95_h<-llqr(X, Y, tau=0.95, t, h=h)
q_5_h5<-llqr(X, Y, tau=0.05, t, h=h/5)
q_50_h5<-llqr(X, Y, tau=0.50, t, h=h/5)
q_95_h5<-llqr(X, Y, tau=0.95, t, h=h/5)
q_5_5h<-llqr(X, Y, tau=0.05, t, h=5*h)
q_50_5h<-llqr(X, Y, tau=0.50, t, h=5*h)
q_95_5h<-llqr(X, Y, tau=0.95, t, h=5*h)
# Plotting the quantile curves
plot(X, Y)
lines(q_5_h$x.values,q_5_h$y.values, col = "red")
lines(q_50_h$x.values,q_50_h$y.values, col = "red")
lines(q_95_h$x.values,q_95_h$y.values, col = "red")
lines(q_5_h5$x.values,q_5_h5$y.values, col = "green")
lines(q_50_h5$x.values,q_50_h5$y.values, col = "green")
lines(q_95_h5$x.values,q_95_h5$y.values, col = "green")
lines(q_5_5h$x.values,q_5_5h$y.values, col = "blue")
lines(q_50_5h$x.values,q_50_5h$y.values, col = "blue")
lines(q_95_5h$x.values,q_95_5h$y.values, col = "blue")
log_floorspace <- log(200)
log_sale_price <- rn_ll(log_floorspace, Y=log(Y), X=log(X), h=100)
estimated_sale_price <- exp(log_sale_price)
smooth_result <- ksmooth(X, Y, kernel="normal", bandwidth=100)
estimated_sale_price <- smooth_result$y[smooth_result$x == 200]
log_quantile_results <- llqr(log(X), log(Y), tau=c(0.05, 0.50, 0.95), t=log(200), h=300)
log_floorspace <- log(200)
log_sale_price <- rn_ll(log_floorspace, Y=log(Y), X=log(X), h=100)
estimated_sale_price <- exp(log_sale_price)
smooth_result <- ksmooth(X, Y, kernel="normal", bandwidth=100)
estimated_sale_price <- smooth_result$y[smooth_result$x == 200]
log_quantile_results_0.05 <- llqr(log(X), log(Y), tau=0.05, t=log(200), h=300)
log_quantile_results_0.50 <- llqr(log(X), log(Y), tau=0.50, t=log(200), h=300)
log_quantile_results_0.95 <- llqr(log(X), log(Y), tau=0.95, t=log(200), h=300)
quantiles <- exp(log_quantile_results$y.values)
log_floorspace <- log(200)
log_sale_price <- rn_ll(log_floorspace, Y=log(Y), X=log(X), h=100)
estimated_sale_price <- exp(log_sale_price)
smooth_result <- ksmooth(X, Y, kernel="normal", bandwidth=100)
estimated_sale_price <- smooth_result$y[smooth_result$x == 200]
log_quantile_results_5 <- llqr(log(X), log(Y), tau=0.05, t=log(200), h=300)
log_quantile_results_50 <- llqr(log(X), log(Y), tau=0.50, t=log(200), h=300)
log_quantile_results_95 <- llqr(log(X), log(Y), tau=0.95, t=log(200), h=300)
quantiles5 <- exp(log_quantile_results_5$y.values)
quantiles50 <- exp(log_quantile_results_50$y.values)
quantiles95 <- exp(log_quantile_results_95$y.values)
quantiles5
quantiles50
quantiles95
